import * as R from 'remeda';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import Fastify from 'fastify';
import googleCreds from '../google-credentials.json';
import { Character } from '../src/types';

// TODO: move this to an env var
const GOOGLE_SHEET_ID = '1-Ru7GGRZ26rRndLKC8KH6R5B4OL6K2-4zZ_6_MsN3fk';

const NAME_QUESTION = 'What is your name? (First name is enough)';
const GENDER_QUESTION = 'Gender';

const QUESTION_TRAIT_MAP = {
  respectsOthers: {
    selfQuestion: 'Do you show your partner that you respect them?',
    importanceQuestion:
      'How important is it that your partner show you respect?',
  },
  vulnerability: {
    selfQuestion: 'Are you vulnerable with your partner?',
    importanceQuestion:
      'How important is it that your partner be vulnerable with you?',
  },
  trustsOthers: {
    selfQuestion: 'Do you trust in your partner?',
    importanceQuestion: 'How important is it that your partner trust you?',
  },
  honest: {
    selfQuestion: 'Are you honest with your partner?',
    importanceQuestion:
      'How important is it that your partner be honest with you?',
  },
  empathetic: {
    selfQuestion: 'Are you empathetic with your partner?',
    importanceQuestion:
      'How important is it that your partner be empathetic towards you?',
  },
  prioritizesKindness: {
    selfQuestion: 'Do you prioritize kindness with your partner?',
    importanceQuestion:
      'How important is it that your partner prioritize kindness towards you?',
  },
  respectsBoundaries: {
    selfQuestion: "Do you respect your partner's boundaries?",
    importanceQuestion:
      'How important is it that your partner respect your boundaries?',
  },
  committed: {
    selfQuestion: 'Are you committed to your partner and the relationship?',
    importanceQuestion:
      'How important is it that your partner be committed to you and the relationship?',
  },
  thoughtful: {
    selfQuestion: 'Are you thoughtful towards your partner?',
    importanceQuestion:
      'How important is it that your partner be thoughtful towards you?',
  },
  forgivesOthers: {
    selfQuestion: 'Are you forgiving towards your partner?',
    importanceQuestion:
      'How important is it that your partner be forgiving towards you?',
  },
  gentleToOthers: {
    selfQuestion: 'Are you gentle with your partner?',
    importanceQuestion:
      'How important is it that your partner be gentle with you?',
  },
  affectionate: {
    selfQuestion: 'Are you affectionate with your partner?',
    importanceQuestion:
      'How important is it that your partner be affectionate with you?',
  },
  appreciative: {
    selfQuestion: 'Do you consistently show your partner appreciation?',
    importanceQuestion:
      'How important is it that your partner appreciate you with consistency?',
  },
  validatesOthers: {
    selfQuestion: 'Do you validate your partner?',
    importanceQuestion: 'How important is it that your partner validate you?',
  },
};

function isValidSelfScore(score: number | undefined): score is number {
  return score !== undefined && score <= 1 && score >= 0;
}

function isValidImportanceScore(
  importance: number | undefined,
): importance is 1 | 2 | 3 | 4 | 5 {
  return (
    importance === 1 ||
    importance === 2 ||
    importance === 3 ||
    importance === 4 ||
    importance === 5
  );
}

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: googleCreds.client_email,
  key: googleCreds.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const fastify = Fastify({
  logger: true,
});

// Declare a route
fastify.get('/data', async () => {
  const worksheet = new GoogleSpreadsheet(GOOGLE_SHEET_ID, serviceAccountAuth);

  await worksheet.loadInfo(); // loads document properties and worksheets
  const sheet = worksheet.sheetsByIndex[0];
  const rows = await sheet.getRows();
  const characters: readonly (Character | undefined)[] = rows.map(row => {
    const nameRawVal = row.get(NAME_QUESTION);
    const genderRawVal = row.get(GENDER_QUESTION);
    const name =
      nameRawVal && typeof nameRawVal === 'string' ? nameRawVal : undefined;
    const gender =
      genderRawVal === 'Male' ||
      genderRawVal === 'Female' ||
      genderRawVal === 'Nonbinary'
        ? genderRawVal
        : undefined;

    const selfScores = R.mapValues(QUESTION_TRAIT_MAP, formLabels => {
      const value = row.get(formLabels.selfQuestion);
      return value && typeof value === 'string'
        ? Number(value) / 10
        : undefined;
    });

    const importanceScores = R.mapValues(QUESTION_TRAIT_MAP, formLabels => {
      const value = row.get(formLabels.importanceQuestion);
      return value && typeof value === 'string' ? Number(value) : undefined;
    });

    const selfScoreVals = Object.values(selfScores);
    const importanceScoreVals = Object.values(importanceScores);

    // only include this row if this person has all necessary information
    if (
      name &&
      gender &&
      selfScoreVals.every(isValidSelfScore) &&
      importanceScoreVals.every(isValidImportanceScore)
    ) {
      const traits = R.mapValues(selfScores, (selfScore, traitKey) => {
        const importance = importanceScores[traitKey];
        return {
          score: isValidSelfScore(selfScore) ? selfScore : 0,
          importance: isValidImportanceScore(importance) ? importance : 1,
        };
      });

      return {
        name,
        gender,
        traits,
      };
    }

    return undefined;
  });

  const validCharacters = characters.filter(R.isDefined);
  return { characters: validCharacters };
});

// Declare more routes here

// Run the server!
const start = async (): Promise<void> => {
  try {
    await fastify.listen({ port: 5000 });
    const address = fastify.server.address();
    if (typeof address === 'object' && address !== null) {
      console.log(`Server is running at ${address.port}`);
    }
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};
start();
